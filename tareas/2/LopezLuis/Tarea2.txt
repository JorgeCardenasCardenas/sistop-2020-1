Tarea 2
En este documento planteare algunas de las dificultades que se me presentaron durante la tarea, para empezar la primera incognita que tuve fue como representar el tiempo de los procesos, como puedo abstraer el concepto de tiempo a mi programa, investigando por el internet vi algunos ejemplos en los que usaban algunas Interfacez y metodos de Java, el lenguaje en el que decidi desarrollar la tarea, de forma concreta la interfaz de tiempo, pero esto solo me confundio un poco y decidi que seria mas trabajo, asi que decidi manejar el tiempo como algo implicito, antes de todo esto defini un proceso simplemente como algo abstracto,utilice un arreglo bidimensional en el que guardaba las caracteristicas de cada proceso, decidi que solo habrian 5 procesos y sus tiempos de ejecucuion se generarian aleatoriamente, empece y termine con mi idea de que la suma del tiempo de procesamiento de cada porceso tendra como limite 20 ticks, ni mas ni menos,aqui no tuve muchas dificultades, solo en generar tiempos que al final se acomodaran a los 20 ticks, al realizar eso vi que cada tiempo no era aleatorio completamente ya que el primero si era aleatorio pero los demas venian limitados de los otros tiempos por lo que tuve que realizar algunos ajustes, pero ya corregido todo tendriamos el arreglo [m][n], en el que m=5 serian los procesos y n=0,1 donde irian los datos del proceso, 0 seria el tiempo requerido de procesamiento, y 1 el tiempo de llegada, despues comence implementando el FCFS el mas facil de implementar, en este de manera general solo introduje contadores que llevaran las cuentas, tales como inicio,final, el tiempo total, y asi se simulara los tiempos de cada proceso cuando iniciaba y cuando finalizaba, este metodo fue el que mejor me salio, en Round robin tuve algunos problemas pero los pude solucionar, Aqui me gustaria mencionar que tome A,B,C,D como numeros es decir lo anterior seria equivalente a 0,1,2,3, en round robin con q=4 cambiamos los ticks pero en este metodo tuve algunos problemas evidentemente no solo es cambiar el numero de ticks si no que hay que realizar otros cambios, no pudiendo encontrarlos todos , en este algoritmo en ciertos casos deja de funcionar correctamente, el problema se encuentra en los casos en que el tiempo restante de algun procesos es menor de 3 , el mas corto primero, es un algoritmo que se veia facil, logre implementarlo a medias solo me falto un problema el cual era que como en cada iteracion para encontrar el proceso mas peque√±o agregaba los procesos que ya habian llegado al planificador y ya se habian despachado, entraba en un buble sin salida, una idea que tuve era tener un registro de los que ya habian pasado pero al momento de quitar el elemento el indice quitaba elementos que no coincidian, por ejemplo tenia: 5,7,6 quitaba el elemento 0 y quito 5, despues quitaba el elemento 1 , teniendo 7,6 y quitaba 6 no 7 este problema se podria evitar si no hubiera tiempos repetidos pero eso no seria una solucion,otra  que los procesos llegaran de forma acendente y sin saltos en el tiempo de llegada.
Estos probelamas no son respecto a algo de la tarea que no entendi si no problemas mas mios que nada, por lo que la solucion de estos solo queda ya en mi, solo puse que se ejecutara 1 vez cada algoritmo para evitar errores por lo incompleto de algun metodo.

La generacion de llegada se coloca manualmente teoricamente mi metodo si funciona para cualquier acomodo de tiempos de llegada
El metodo principal esta en Inicio.java
